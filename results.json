{
  "config": {
    "configFile": "D:\\Documents\\PersonalAutomation\\APItest\\playwright.config.ts",
    "rootDir": "D:/Documents/PersonalAutomation/APItest",
    "forbidOnly": false,
    "fullyParallel": false,
    "globalSetup": null,
    "globalTeardown": null,
    "globalTimeout": 0,
    "grep": {},
    "grepInvert": null,
    "maxFailures": 0,
    "metadata": {
      "actualWorkers": 1
    },
    "preserveOutput": "always",
    "reporter": [
      [
        "html",
        {
          "outputFolder": "test-results",
          "open": "never"
        }
      ],
      [
        "json",
        {
          "outputFolder": "test-results",
          "outputFile": "results.json"
        }
      ]
    ],
    "reportSlowTests": {
      "max": 5,
      "threshold": 15000
    },
    "quiet": false,
    "projects": [
      {
        "outputDir": "D:/Documents/PersonalAutomation/APItest/test-results",
        "repeatEach": 1,
        "retries": 0,
        "metadata": {},
        "id": "",
        "name": "",
        "testDir": "D:/Documents/PersonalAutomation/APItest",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 30000
      }
    ],
    "shard": null,
    "updateSnapshots": "missing",
    "version": "1.49.1",
    "workers": 6,
    "webServer": null
  },
  "suites": [
    {
      "title": "tests\\api.test.ts",
      "file": "tests/api.test.ts",
      "column": 0,
      "line": 0,
      "specs": [
        {
          "title": "Check weather using city name",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 30000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "",
              "projectName": "",
              "results": [
                {
                  "workerIndex": 0,
                  "status": "passed",
                  "duration": 745,
                  "errors": [],
                  "stdout": [
                    {
                      "text": "Successfully retrieved weather data for London\n"
                    }
                  ],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-21T18:05:47.869Z",
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "862461b5a5f05288fdfc-040acf5725d1316cf245",
          "file": "tests/api.test.ts",
          "line": 34,
          "column": 5
        },
        {
          "title": "Check weather using sea coordinates",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 30000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "",
              "projectName": "",
              "results": [
                {
                  "workerIndex": 0,
                  "status": "passed",
                  "duration": 107,
                  "errors": [],
                  "stdout": [
                    {
                      "text": "Successfully retrieved weather data for coordinates (Lat: 18.272853, Lon: -69.790003)\n"
                    }
                  ],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-21T18:05:48.626Z",
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "862461b5a5f05288fdfc-e6ca43dfbfe078380e6f",
          "file": "tests/api.test.ts",
          "line": 66,
          "column": 5
        },
        {
          "title": "Check weather using city name with typo",
          "ok": false,
          "tags": [],
          "tests": [
            {
              "timeout": 30000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "",
              "projectName": "",
              "results": [
                {
                  "workerIndex": 0,
                  "status": "failed",
                  "duration": 174,
                  "error": {
                    "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0\u001b[39m\nReceived:   \u001b[31m0\u001b[39m",
                    "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0\u001b[39m\nReceived:   \u001b[31m0\u001b[39m\n    at D:\\Documents\\PersonalAutomation\\APItest\\tests\\api.test.ts:96:34",
                    "matcherResult": {
                      "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0\u001b[39m\nReceived:   \u001b[31m0\u001b[39m",
                      "pass": false
                    },
                    "location": {
                      "file": "D:\\Documents\\PersonalAutomation\\APItest\\tests\\api.test.ts",
                      "column": 34,
                      "line": 96
                    },
                    "snippet": "\u001b[0m \u001b[90m 94 |\u001b[39m     \n \u001b[90m 95 |\u001b[39m     expect(geocodingResponse\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 96 |\u001b[39m     expect(geocodingData\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m  \u001b[90m// Ensure at least one result\u001b[39m\n \u001b[90m    |\u001b[39m                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 97 |\u001b[39m     \u001b[36mconst\u001b[39m { lat\u001b[33m,\u001b[39m lon } \u001b[33m=\u001b[39m geocodingData[\u001b[35m0\u001b[39m]\u001b[33m;\u001b[39m  \u001b[90m// Get lat and lon from the first result\u001b[39m\n \u001b[90m 98 |\u001b[39m\n \u001b[90m 99 |\u001b[39m     \u001b[90m// Step 2: Use the coordinates to call the One Call API\u001b[39m\u001b[0m"
                  },
                  "errors": [
                    {
                      "location": {
                        "file": "D:\\Documents\\PersonalAutomation\\APItest\\tests\\api.test.ts",
                        "column": 34,
                        "line": 96
                      },
                      "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0\u001b[39m\nReceived:   \u001b[31m0\u001b[39m\n\n\u001b[0m \u001b[90m 94 |\u001b[39m     \n \u001b[90m 95 |\u001b[39m     expect(geocodingResponse\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 96 |\u001b[39m     expect(geocodingData\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m  \u001b[90m// Ensure at least one result\u001b[39m\n \u001b[90m    |\u001b[39m                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 97 |\u001b[39m     \u001b[36mconst\u001b[39m { lat\u001b[33m,\u001b[39m lon } \u001b[33m=\u001b[39m geocodingData[\u001b[35m0\u001b[39m]\u001b[33m;\u001b[39m  \u001b[90m// Get lat and lon from the first result\u001b[39m\n \u001b[90m 98 |\u001b[39m\n \u001b[90m 99 |\u001b[39m     \u001b[90m// Step 2: Use the coordinates to call the One Call API\u001b[39m\u001b[0m\n\u001b[2m    at D:\\Documents\\PersonalAutomation\\APItest\\tests\\api.test.ts:96:34\u001b[22m"
                    }
                  ],
                  "stdout": [],
                  "stderr": [
                    {
                      "text": "Test failed due to error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeGreaterThan\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: > \u001b[32m0\u001b[39m\nReceived:   \u001b[31m0\u001b[39m\n"
                    }
                  ],
                  "retry": 0,
                  "startTime": "2024-12-21T18:05:48.736Z",
                  "attachments": [],
                  "errorLocation": {
                    "file": "D:\\Documents\\PersonalAutomation\\APItest\\tests\\api.test.ts",
                    "column": 34,
                    "line": 96
                  }
                }
              ],
              "status": "unexpected"
            }
          ],
          "id": "862461b5a5f05288fdfc-c2fd5961ef8106c2102d",
          "file": "tests/api.test.ts",
          "line": 85,
          "column": 5
        },
        {
          "title": "Check weather using expected wrong coordinates",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 30000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "",
              "projectName": "",
              "results": [
                {
                  "workerIndex": 1,
                  "status": "passed",
                  "duration": 314,
                  "errors": [],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-21T18:05:49.570Z",
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "862461b5a5f05288fdfc-1505cebd2e826e920509",
          "file": "tests/api.test.ts",
          "line": 117,
          "column": 5
        }
      ]
    }
  ],
  "errors": [],
  "stats": {
    "startTime": "2024-12-21T18:05:47.177Z",
    "duration": 2731.713,
    "expected": 3,
    "skipped": 0,
    "unexpected": 1,
    "flaky": 0
  }
}